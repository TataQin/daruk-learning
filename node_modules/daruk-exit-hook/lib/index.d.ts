declare const noop: () => void;
declare const defaultOptions: {
    onExitDone: () => void;
    onExit: () => void;
    asyncTimeoutMs: number;
};
declare type exitFunc = (err: Error | null, callback: () => void) => void;
declare type exitDoneFunc = (code: number) => void;
interface IExitHookOptions {
    onExit: exitFunc;
    onExitDone?: exitDoneFunc;
    asyncTimeoutMs?: number;
}
interface IEvents {
    [key: string]: any;
}
interface IFilters {
    [key: string]: any[];
}
declare class ExitHook {
    options: IExitHookOptions;
    hooks: exitFunc[];
    called: boolean;
    waitingFor: number;
    unhandledRejectionHooks: exitFunc[];
    uncaughtExceptionHooks: exitFunc[];
    events: IEvents;
    filters: IFilters;
    constructor(options: IExitHookOptions);
    addHook(exitFunc: exitFunc): void;
    add(hook: exitFunc): void;
    unhandledRejectionHandler(hook: exitFunc): void;
    uncaughtExceptionHandler(hook: exitFunc): void;
    hookEvent(event: any, code?: number, filter?: Function): void;
    unhookEvent(event: string): void;
    unhookAllEvent(): void;
    exit(exit: boolean, type?: string, code?: number, err?: Error): void;
}

export = ExitHook;
